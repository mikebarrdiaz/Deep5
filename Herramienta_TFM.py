import streamlit as st
import pydeck as pdk
import pandas as pd


st.set_page_config(
    page_title="Redistribuci√≥n Tur√≠stica",
    page_icon="üåç",
    layout="wide"
)

# ---- CARGAR DATOS EXCEL ----
@st.cache_data
def cargar_datos():
    xls = pd.ExcelFile("./Data_Dataestur/DATA_TOTAL.xlsx")
    df_total = pd.read_excel(xls, sheet_name="Total")
    df_coords = pd.read_excel(xls, sheet_name="Coordenadas ZT")
    return df_total, df_coords

df_total, df_coords = cargar_datos()

# ---- NORMALIZAR CLAVES PARA EL JOIN ----
df_total["ZONA_TURISTICA"] = df_total["ZONA_TURISTICA"].str.strip()
df_coords["ZONA_TURISTICA"] = df_coords["ZONA_TURISTICA"].str.strip()

# ---- UNIR COORDENADAS A DATOS ----
df = pd.merge(df_total, df_coords[["ZONA_TURISTICA", "lat", "long"]], on="ZONA_TURISTICA", how="left")

# ---- Encabezado con logo a la izquierda y texto a la derecha ----
col_logo, col_text, col_logo2 = st.columns([1, 4, 1])

with col_logo:
    st.image("Redisstour.svg", width=300)  # Ajusta el tama√±o del logo a tu gusto

with col_logo2:
    st.image("Logo_Deep5.svg", width=300)  # Ajusta el tama√±o del logo a tu gusto

with col_text:
    st.markdown("""
        <style>
            .header-container {
                display: flex;
                flex-direction: column;
                justify-content: center;
                height: 100%;
                font-family: 'Segoe UI', sans-serif;
            }
            .header-container h1 {
                font-size: 2.4rem;
                font-weight: 700;
                color: #1c1c1c;
                margin: 0;
            }
            .header-container p {
                font-size: 1.1rem;
                color: #5a5a5a;
                margin: 0 0.3rem 0 0;
            }
        </style>

        <div class="header-container">
            <h1>Redistribuci√≥n Inteligente del Flujo Tur√≠stico</h1>
            <p>Hacia un turismo m√°s sostenible y equilibrado en Espa√±a</p>
        </div>
    """, unsafe_allow_html=True)

    


st.markdown("<br>", unsafe_allow_html=True)

# ---- LISTA DE IM√ÅGENES ----
imagenes = [
    {
        "url": "https://images.unsplash.com/photo-1605654464243-3668a4c0de3d?q=80&w=1700&auto=format&fit=crop&ixlib=rb-4.1.0",
        "ciudad": "Alhambra, Granada"
    },
    {
        "url": "https://images.unsplash.com/photo-1655405927893-96a5b68490c1?q=80&w=1548&auto=format&fit=crop&ixlib=rb-4.1.0",
        "ciudad": "Benidorm, Alicante"
    },
    {
        "url": "https://images.unsplash.com/photo-1536075597888-91fe9f9cacd7?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0",
        "ciudad": "Mirador del Cap de la Barra, Costa Brava"
    },
    {
        "url": "https://images.unsplash.com/photo-1677939217436-01d7c0b8738e?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0",
        "ciudad": "Torre del Oro, Sevilla"
    }
]

# ---- INDEXADO EN SESSION STATE ----
if "imagen_idx" not in st.session_state:
    st.session_state.imagen_idx = 0

if "seccion" not in st.session_state:
    st.session_state.seccion = "Inicio"

# ---- FUNCIONES DE BOTONES ----
def avanzar():
    st.session_state.imagen_idx = (st.session_state.imagen_idx + 1) % len(imagenes)

def retroceder():
    st.session_state.imagen_idx = (st.session_state.imagen_idx - 1) % len(imagenes)


# ---- MEN√ö DE FUNCIONALIDADES (barra centrada y estirada) ----
col_left, col0, col1, col2, col3, col4, col_right = st.columns([1, 2, 2, 2, 2, 2, 1])

with col0:
    if st.button("Inicio", use_container_width=True):
        st.session_state.seccion = "Inicio"
with col1:
    if st.button("Destino alternativo", use_container_width=True):
        st.session_state.seccion = "Seleccionar destino alternativo"
with col2:
    if st.button("Mapa saturaci√≥n", use_container_width=True):
        st.session_state.seccion = "Ver mapas de saturaci√≥n"
with col3:
    if st.button("Datos hist√≥ricos", use_container_width=True):
        st.session_state.seccion = "Consultar datos hist√≥ricos"
with col4:
    if st.button("Acerca del proyecto", use_container_width=True):
        st.session_state.seccion = "Acerca del proyecto"



# Mostrar contenido seg√∫n lo seleccionado
opcion = st.session_state.seccion

# ---- SECCIONES SEG√öN OPCI√ìN ----
if opcion == "Inicio":
        
        # ---- CSS personalizado ----
        st.markdown("""
            <style>
                .img-wrapper {
                    position: relative;
                    width: 100%;
                    height: 450px;
                }
                .img-wrapper img {
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    border-radius: 5px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                }
                .city-label {
                    position: absolute;
                    bottom: 20px;
                    right: 30px;
                    background: rgba(0, 0, 0, 0.5);
                    color: white;
                    padding: 0.5rem 1rem;
                    border-radius: 6px;
                    font-size: 1rem;
                    font-weight: 500;
                }
            </style>
        """, unsafe_allow_html=True)


        # Mostrar la imagen
        imagen_actual = imagenes[st.session_state.imagen_idx]
        st.markdown(f"""
            <div class="img-wrapper">
                <img src="{imagen_actual['url']}" alt="{imagen_actual['ciudad']}">
                <div class="city-label">{imagen_actual['ciudad']}</div>
            </div>
        """, unsafe_allow_html=True)


        st.markdown("<br>", unsafe_allow_html=True)

        # Crear columnas para los botones y un espacio central
        col1, col2, col3 = st.columns([1, 30, 1])

        # Bot√≥n de retroceder en la primera columna
        if col1.button('‚óÄ'):
            retroceder()

        # Bot√≥n de avanzar en la segunda columna
        if col3.button('‚ñ∂'):
            avanzar()

        
        # ---- MOTIVACI√ìN DEL PROYECTO ----
        st.subheader("Motivaci√≥n del proyecto")
        st.info("Espa√±a se enfrenta al reto de gestionar el crecimiento tur√≠stico sin comprometer la sostenibilidad ni la calidad de vida de sus habitantes.")

        st.write("""
        En las √∫ltimas d√©cadas, Espa√±a se ha consolidado como uno de los destinos tur√≠sticos m√°s importantes del mundo. 
        Sin embargo, este crecimiento ha generado desaf√≠os significativos:

        - **Saturaci√≥n de destinos populares** como Barcelona, Sevilla o Ibiza, especialmente en temporada alta.
        - **Presi√≥n sobre las infraestructuras locales**, recursos y servicios.
        - **Impacto ambiental y p√©rdida de calidad en la experiencia tur√≠stica**.

        A pesar de la concentraci√≥n tur√≠stica en zonas muy concretas, existen numerosos destinos con alto potencial que permanecen infrautilizados.  
        Esto evidencia la necesidad de redistribuir de forma m√°s equitativa el flujo tur√≠stico en el territorio nacional.
        """)

        # ---- OBJETIVO DEL SISTEMA ----
        st.subheader("Objetivo del sistema")
        st.info("Desarrollar una herramienta inteligente para analizar, visualizar y redistribuir el turismo de forma sostenible en Espa√±a.")

        st.write("""
        Este proyecto tiene como prop√≥sito el dise√±o de una plataforma interactiva basada en datos, con los siguientes objetivos clave:

        - Analizar datos hist√≥ricos para detectar **zonas tur√≠sticas saturadas**.
        - Sugerir **destinos alternativos** menos masificados con caracter√≠sticas similares.
        - Proporcionar **visualizaci√≥n din√°mica** de la evoluci√≥n tur√≠stica mediante mapas y gr√°ficos.
        - Facilitar la toma de decisiones a gestores p√∫blicos y privados, con una visi√≥n centrada en la **sostenibilidad y la equidad territorial**.

        Este sistema se alinea con los principios de los **Objetivos de Desarrollo Sostenible** y las estrategias de **turismo inteligente en Europa**.
        """)


if opcion == "Seleccionar destino alternativo":
    st.subheader("üîç Recomendador de destinos tur√≠sticos alternativos")
    st.info("Aqu√≠ podr√°s introducir tu destino actual y ver sugerencias menos saturadas con caracter√≠sticas similares.")
    # Aqu√≠ ir√° la l√≥gica de recomendaci√≥n futur


elif opcion == "Ver mapas de saturaci√≥n":
    st.subheader("Mapa de saturaci√≥n tur√≠stica por zona")
    st.info("Visualiza la concentraci√≥n de turistas en cada zona mediante columnas proporcionales al n√∫mero de viajeros.")

    # ---- FILTROS INTERACTIVOS ----
    st.markdown("### üéöÔ∏è Filtros temporales y tipo de turismo")

    col_f1, col_f2, col_f3 = st.columns([1.2, 1.2, 2])

    # A√±o
    with col_f1:
        a√±os_disponibles = sorted(df["A√ëO"].dropna().unique())
        opciones_a√±o = ["Todos los a√±os"] + [str(a) for a in a√±os_disponibles]
        a√±o_seleccionado = st.selectbox("üìÖ A√±o", opciones_a√±o)

    # Mes
    with col_f2:
        meses_nombres = {
            1: "Enero", 2: "Febrero", 3: "Marzo", 4: "Abril", 5: "Mayo", 6: "Junio",
            7: "Julio", 8: "Agosto", 9: "Septiembre", 10: "Octubre", 11: "Noviembre", 12: "Diciembre"
        }
        meses_disponibles = sorted(df["MES"].dropna().unique())
        opciones_mes = ["Todos los meses"] + [meses_nombres[m] for m in meses_disponibles]
        mes_seleccionado = st.selectbox("üóìÔ∏è Mes", opciones_mes)

    # Tipo de turismo
    with col_f3:
        tipo = st.selectbox("üè® Tipo de turismo", [
            "Turismo Hotelero", "Turismo Rural", "Apartamentos", "Campings"
        ])

    # ---- ASIGNAR COLUMNA CORRESPONDIENTE ----
    columnas_tipo = {
        "Turismo Hotelero": "VIAJEROS_EOH",
        "Turismo Rural": "VIAJEROS_EOTR",
        "Apartamentos": "VIAJEROS_EOAP",
        "Campings": "VIAJEROS_EOAC"
    }
    columna_viajeros = columnas_tipo[tipo]

    # ---- APLICAR FILTROS SEG√öN SELECCIONES ----
    df_filtrado = df.copy()
    if a√±o_seleccionado != "Todos los a√±os":
        df_filtrado = df_filtrado[df_filtrado["A√ëO"] == int(a√±o_seleccionado)]
    if mes_seleccionado != "Todos los meses":
        mes_num = [k for k, v in meses_nombres.items() if v == mes_seleccionado][0]
        df_filtrado = df_filtrado[df_filtrado["MES"] == mes_num]

    # Filtrar valores no nulos y mayores que 0
    df_filtrado = df_filtrado[df_filtrado[columna_viajeros] > 0]

    # ---- AGRUPAR POR ZONA Y COORDENADAS ----
    df_grouped = df_filtrado.groupby(["ZONA_TURISTICA", "lat", "long"], as_index=False)[columna_viajeros].sum()
    df_grouped = df_grouped.rename(columns={columna_viajeros: "viajeros"})

    # ---- MOSTRAR MAPA CON COLUMNAS ----
    st.pydeck_chart(pdk.Deck(
        map_style=None,
        initial_view_state=pdk.ViewState(
            latitude=39,
            longitude=-3.5,
            zoom=3.5,
            pitch=30
        ),
        layers=[
            pdk.Layer(
                "ColumnLayer",
                data=df_grouped,
                get_position='[long, lat]',
                get_elevation='viajeros',
                elevation_scale=0.1,
                radius=10000,
                get_fill_color='[200, 30, 0, 160]',
                pickable=True,
                auto_highlight=True,
            )
        ],
        tooltip={
            "html": """
                <div style='font-family: Segoe UI; font-size: 13px;'>
                    <strong>{ZONA_TURISTICA}</strong><br>
                    <span style='color: black;'>Viajeros: {viajeros}</span>
                </div>
            """,
            "style": {
                "backgroundColor": "#f9f9f9",
                "color": "#000",
                "border": "1px solid #ccc",
                "borderRadius": "6px",
                "padding": "10px"
            }
        }

    ))




    
elif opcion == "Consultar datos hist√≥ricos":
    st.subheader("üìà Evoluci√≥n de datos tur√≠sticos")
    st.info("Consulta viajeros, pernoctaciones y ocupaci√≥n a lo largo del tiempo.")
    # Aqu√≠ ir√°n gr√°ficos y tablas

elif opcion == "Acerca del proyecto":
    st.subheader("‚ÑπÔ∏è Acerca de este proyecto")
    st.write("""
Este proyecto forma parte del Trabajo de Fin de M√°ster (TFM) en el que se desarrolla un sistema
de recomendaci√≥n y an√°lisis para mejorar la distribuci√≥n del turismo en Espa√±a, utilizando
herramientas de ciencia de datos, visualizaci√≥n interactiva y modelado predictivo.
    """)

# ---- PIE DE P√ÅGINA ----
st.markdown("---")
st.markdown("<p style='text-align: center; color: gray;'>¬© 2025 Proyecto TFM - Redistribuci√≥n Tur√≠stica | Deep5</p>", unsafe_allow_html=True)
